1.两个分支都有的文件，在分支1上发生修改后，可以直接切到分支2，这时分支1和分支2的工作区都会有修改，且修改在两个分支上是同步的。
2.两个分支都有的文件，在分支1上发生修改并执行了git add后，不可直接切到分支2，可通过git stash来将分支1的内容带到分支2上，分支1上执行完git stash后之前修改的内容不显示。
注意：如果在分支2上执行了git stash pop后在切回分支1，分支1上的内容是stash之前的内容。
3.两个分支都有的文件，在分支1上发生修改并执行了git commit后，可以直接切到分支2，可通过git cherry-pick commit号来将分支1的内容带到分支2上。
4.分支1上新增的文件，可以直接切到分支2，这时分支1和分支2的工作区都会有新增的文件。
5.分支1上新增的文件，执行了git add后，可以直接切到分支2，这时分支1和分支2的工作区都会有新增的文件。
6.分支1上新增的文件，执行了git commit后，可以直接切到分支2，但是分支2上没有新增的文件。
7.分支1上有，分支2上没有的文件，在分支1上发生修改后，不可直接切到分支2，这时可在分支1上执行git add git commit ,然后可以切分支2了，但是分支2上还是没有分支1上新建的文件的
在分支2上通过git cherry-pick 最新的commit号可以将分支上有的并且修改后的最新的文件也带到分支2上来！


总结：修改或新增的文件，可直接切换分支，且两个分支内容同步（因为都只在工作区内）
     修改的文件（两个分支都有），git add后，不可直接切到分支2，可通过git stash来将分支1的内容带到另一个分支上。
     新增的文件，git add后，可以直接切到分支2，这时分支1和分支2的工作区都会有新增的文件,且两个分支上的文件内容同步。
     修改或新增的文件，git commit后，可以直接切到分支2，可通过git cherry-pick commit号来将分支1的内容带到另一个分支上。