一.本地操作：
 查看分支  git branch 
 新建分支  git branch 分支名  
切换分支  git checkout 分支名  注意：在这个新的分支上的修改执行 git add git commit后这个分支上的内容会发生改变，但master
               分支上不会改变（如果你打开本地文件会发现文件修改了是因为你现在不在master分支上，切换回master分支就会发现文件未修改）
合并分支  先切换回master,然后Git merge 分支名，这个时候会将其他分支合并到master上，master的内容会发生改变。
删除分支  git branch -d 分支名
可以新建切换写成一个命令： git checkout -b 分支名
二.远程分支操作：
查看远程分支  git branch -a
新建的本地分支（feature）push到远程服务器：git push origin 分支名：分支名（feature）
                                                                      git push [远程名] [本地分支]:[远程分支] 
删除远程分支                                                   git push [远程名] :[分支名]
                 删除后，我再git fetch origin,那么本地的feature分支还在，但是远程的feature已经没有了，如
                 git branch -a
  	feature
	* master
  	remotes/origin/HEAD -> origin/master
  	remotes/origin/master

三。
当我git clone 一个拥有两个分支的rep的时候,
执行git branch -a的结果是，本地没有这个feature分支，内容是master分支上的内容，即
  * master
   remotes/origin/HEAD -> origin/master
   remotes/origin/feature
   remotes/origin/master
当我的协同者git fetch origin master（从远程的origin仓库的master分支下载代码到本地的origin master,如果不把origin master合并到本地master,那么本地master内容不会变）时，本地也没有这个feature分支。
当我想要直接从git服务器更新本地上的代码时我可以直接git pull(在哪个分支上执行的操作就会把哪个分支下的内容更新，其他分支不影响)
如果想要一份自己的 feature 来开发，可以在远程分支的基础上分化出一个新的分支来git checkout -b feature origin/feature（称为跟踪远程分支）
这个时候执行git branch -a的结果是，本地有feature分支，本地featue分支内容和远程feature分支内容相同，
注意这里master分支的内容没有变化，即
 git branch -a
* feature
  master
  remotes/origin/HEAD -> origin/master
  remotes/origin/feature
  remotes/origin/master
在这feature分支上进行修改后，git add git commit后直接git push 那么远程的feature分支上内容会发生改变


四。
如果我想修改远程的master分支的内容的话，那么我需要在本地的master分支merge其他分支的内容，然后Git add git commit 
最后Git push,那么远程的master分支也会发生改变。

五。
当我在本地的feature分支修改完后，在这个分支上git add git commit 
然后直接git push，那么服务器上的feature分支也会更新（git push 只会更新执行git push命令时所在分支的内容）

可以参考：
https://git-scm.com/book/zh/v1/Git-%E5%88%86%E6%94%AF-%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF


